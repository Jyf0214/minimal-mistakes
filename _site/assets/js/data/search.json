[
  
  {
    "title": "搜索优化",
    "url": "/posts/search-engine/",
    "date": "2024-04-20 20:45:00 +0800",
    "categories": "Tutorial",
    "content": "基本概括 . Chirpy主题在博客中内置了一套搜索引擎用于文本检索，搜索算法引用自Christian Fei的Simple-Jekyll-Search。 . https://cdn.jsdelivr.net/npm/simple-jekyll-search@1.10.0/ https://reesdraminski.com/garden/search-with-simplejekyllsearch/ https://www.toptal.com/developers/javascript-minifier . "
  },
  
  {
    "title": "Jekyll博客搭建教程（下篇）",
    "url": "/posts/build-my-blog-2/",
    "date": "2024-04-20 20:17:00 +0800",
    "categories": "Tutorial, Jekyll",
    "content": "前言 . Chirpy是一款基于Jekyll架构开发的主题模版，主要面向技术类博客的写作，这是该主题的一个Demo。本站的主题也是由Chirpy主题魔改而来。 . 本文以Chirpy主题为例，介绍如何在Jekyll博客中应用主题模版，并将博客网站部署到GitHub Page上。其他主题的应用方法可能略有不同，但总体思路是一致的。 . 下载主题 . Chirpy主题有两种下载方式： . | Chirpy Starter | Git | . Chirpy Starter . 前往官方的模版页面Chirpy Start，点击按钮Use this template &gt; Create a new repository，将新的repository命名为USERNAME.github.io，其中USERNAME为你的GitHub用户名。 . 再将项目下载到本地，并下载依赖库，将下列命令中的USERNAME替换为你的GitHub用户名。 . | 1 2 . | git clone https://github.com/USERNAME/USERNAME.github.io bundle . | . 这个方法适合只想专心写文章不想接触底层代码的用户。用户无需关注原项目中那一大坨.html和.js文件（因为模版里没有），只需将文章添加至_post目录中即可实现博客的更新。当然不能修改代码也意味着，如果你想在原模版的基础上做些个性化修改，或是添加新的功能，用这个方法是无法实现的。 . Git . 作为一个事多的人，只是套用模版而不做任何修改是无法满足我的需求的，因此我采用了第二种方法：用Git将整个项目的代码下载至本地。这样便能直接修改源代码，实现我想要的功能。 . | 1 . | git clone https://github.com/cotes2020/jekyll-theme-chirpy . | . 由于后续操作会生成JavaScript文件，需事先安装Node.js。再前往项目所在目录，运行初始化程序。 . | 1 . | bash tools/init . | . 完成初始化后，还需下载依赖库。 . | 1 . | bundle . | . 配置主题 . 主要配置 . 博客的配置信息存放在根目录的./_config.yml，常用的变量有： . | lang - 语言 | timezone - 时区 | title - 网站标题 | tagline - 网站副标题 | description - 网站描述 | url - 部署博客的地址，如https://USERNAME.github.io | avatar - 作者头像，如https://chirpy-img.netlify.app/commons/avatar.jpg | . 可选配置 . 在子目录_data下还存放有一些可选填的配置文件，主要涉及网页外观的显示，可根据需求修改。以下是对这些配置文件的简要说明： . 博客的语言信息存放在_data/locate/，如英语的配置文件为_data/locate/en.yml。比如我想自定义侧边菜单栏的选项名，只需修改以下配置。 . | 1 2 3 4 5 6 7 8 . | tabs: # format: &lt;filename_without_extension&gt;: &lt;value&gt; home: Home categories: Categories tags: Tags treehole: Treehole archives: Archives about: About . | . 文章的作者信息存放在_data/authors.yml，可填写多个作者，在文章的作者栏中引用作者id。 . | 1 2 3 . | MsEspeon: name: MsEspeon url: https://github.com/ittousei/ . | . 侧边菜单栏底部的社交账号信息存放在_data/contact.yml。比如我不想显示Twitter，只需在配置文件中注释掉相应内容。 . | 1 2 . | # - type: twitter # icon: \"fa-brands fa-x-twitter\" . | . 文章的分享信息存放在_data/share.yml。比如我想分享文章到Twitter，只需在配置文件中填写以下内容。 . | 1 2 3 4 . | platforms: - type: Twitter icon: \"fa-brands fa-square-x-twitter\" link: \"https://twitter.com/intent/tweet?text=TITLE&amp;url=URL\" . | . 本地测试 . 在服务器上部署博客前，可以先在本地http://localhost:4000预览网页的效果。 . | 1 . | bundle exec jekyll s . | . 注意：以上命令包含两个功能，一是根据项目文件生成静态网页文件，二是将静态网页部署至本地服务器。因此，在将博客部署到远程服务器（如GitHub Page）之前，即使没有本地测试的需求，仍需运行一遍上述命令以生成必要的静态网页文件。 . 部署至GitHub Page . 在实现本地运行后，我们将博客部署到GitHub Page上。在部署之前，我们先做好以下准备工作： . | 创建博客专用的repository，并命名为USERNAME.github.io，USERNAME为你的GitHub用户名。 | 将本地的Chirpy-Jekyll项目关联至GitHub的仓库USERNAME.github.io。这一步我使用的是GitHub Desktop，一款基于Git的图形化界面，相对Git更为简单易用，当然直接使用Git也能实现关联操作。 | 在本地的Chirpy-Jekyll项目的根目录运行： | . | 1 . | bundle lock --add-platform x86_64-linux . | . 我们再到GitHub上配置Page服务： . | 访问博客所在仓库USERNAME.github.io，点击Settings，在左侧菜单栏中选中Pages，再到Build and deployment的Source一栏选中选项GitHub Actions。 | . | 在GitHub Actions选项的下方将出现配置文件GitHub Pages Jekyll，点击Configure按钮，会显示配置文件的具体内容，再点击文件右上角的Commit changes...，即可在仓库中生成配置文件。 . | 最后，我们将配置文件同步到本地。完成上述步骤后，只要我们将代码push到GitHub的仓库中，GitHub Actions便能自动生成静态网页并部署到GitHub Page上。 . | . 如果需要在个人服务器上部署博客，可参考官方文档，在本教程中不做额外说明。 . 博客的更新 . 通过上述步骤，我们实现了Jekyll博客的搭建。如果要在博客上发布新的文章，只需遵循以下步骤： . | 在_posts中添加新的markdown文件。 | 执行下列命令生成静态网页： | . | 1 . | bundle exec jekyll s . | . | 推送至GitHub仓库，更新后的网页会自动部署到GitHub Page上。 | . 结语 . 通过简单的三个步骤，我们实现了个人博客的搭建： . | 安装Jekyll框架生成博客的静态网页 | 应用Chirpy主题设置博客的布局 | 使用GitHub Page部署个人网站 | . 回顾下来，整个博客搭建的过程还是相当水到渠成的，没有遇上什么重大bug。当然，之所以过程这么顺利，是因为去年我已经尝试过使用Hexo搭建个人网站，不过当时的我十分头铁，妄图自己写一套网站的前端（此前没有前端经验，主要使用ChatGPT进行前端开发）。 . 结果也在预料之中，起初我对这个项目是兴致盎然的，然而随着项目的深入bug一个接一个的出现，我更新代码的频率也逐渐降低，后来我的旧电脑不幸故障开不了机，再到换了新的Macbook，我的代码也没拷贝到新电脑上，这个旧电脑上的前端项目便不了了之了。 . 这次博客的搭建历时两天，在4.19完成了Chirpy主题的应用和GitHub Page的部署，在4.20实现博客布局的个性化以及优化搜索算法。本教程主要记录了4.19的工作，4.20的工作会另开一篇进行说明，不过4.20主要是一些基于个人审美而做的工作，倒也不是很重要。最后，就简单地用一句话收尾吧： . 搭建个人博客很简单，因为我们站在巨人的肩膀上。 "
  },
  
  {
    "title": "Jekyll博客搭建教程（上篇）",
    "url": "/posts/build-my-blog-1/",
    "date": "2024-04-20 12:10:00 +0800",
    "categories": "Tutorial, Jekyll",
    "content": "前言 . Jekyll是一个轻量级的静态网站生成器，它采用Liquid作为模板语言，支持用户自定义网页的外观布局、使用Markdown创作发布内容。本文介绍如何使用Jekyll搭建个人网站，内容参考自Jekyll的说明文档。 . 环境安装 . Jekyll要求安装以下环境： . | Ruby | RubyGems | Jekyll | . 笔者的操作系统是Ventura(macOS 13)，因此主要基于mac的安装流程进行说明，其他系统的安装步骤类似，但这里仅给出文档链接不做具体说明。 . 安装Ruby和RubyGems . Ruby的安装详见Jekyll文档。根据需求选择合适的版本，Jekyll要求Ruby版本高于2.5.0，本文使用的版本为3.1.3。RubyGems捆绑在Ruby的安装包中，无需额外下载。 . 对于Windows/Linux等系统，请按照Jekyll文档的说明进行安装，并跳过本章节阅读下一章使用Jekyll搭建博客。 . 在macOS下，可使用ruby-install安装Ruby，和使用chruby配置环境： . | 安装Homebrew | . | 1 . | /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" . | . | 使用Homebrew安装chruby和ruby-install | . | 1 . | brew install chruby ruby-install xz . | . | 使用ruby-install安装Ruby | . | 1 . | ruby-install ruby 3.1.3 . | . | 使用chruby配置环境 | . | 1 2 3 . | echo \"source $(brew --prefix)/opt/chruby/share/chruby/chruby.sh\" &gt;&gt; ~/.zshrc echo \"source $(brew --prefix)/opt/chruby/share/chruby/auto.sh\" &gt;&gt; ~/.zshrc echo \"chruby ruby-3.1.3\" &gt;&gt; ~/.zshrc # run 'chruby' to see actual version . | . | 检查安装是否成功 | . 退出并重启（注意要重开一个窗口）Terminal终端，运行以下命令： . | 1 . | ruby -v . | . 运行结果显示ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e)（或是更高版本）即安装成功。 . 安装Jekyll . 使用Ruby的包管理器RubyGems可直接下载Jekyll。 . | 1 . | gem install jekyll . | . 使用Jekyll搭建博客 . 在上一节中我们安装了前置环境，现在我们创建一个Jekyll项目来生成博客网页。 . 我们选择Bundle来管理Jekyll的项目环境。对于不同的Jekyll项目，可以用Bundle分别搭建独立的依赖环境，而不相互干扰。使用Bundle创建Jekyll项目的流程如下： . | 使用RubyGems下载bundle | . | 1 . | gem install bundler . | . | 在./myblog路径下创建Jekyll项目 | . | 1 2 . | jekyll new myblog cd myblog . | . | 运行项目生成博客网页 | . | 1 . | bundle exec jekyll serve . | . 可以在http://localhost:4000本地浏览网页。 . 自定义博客外观 . 通过创建Jekyll项目，我们生成了一个简易的网站。当然这个网站十分简陋，和一个功能完备的现代博客相去甚远，下一步就是美化网页的外观以及添加更多的功能了。 . 一个选择是自己写一套前端，可以参考这篇教程Step by Step Tutorial，其中的工作量无疑是巨大的。另一个选择是站在巨人的肩膀上，Jekyll拥有成熟的主题开发生态，用户可以从海量的主题模版中挑选出适合自己的那一款。我们可以在他人模版的基础上，根据自己的需求做一些自定义修改。 . 下面列出一些常用Jekyll主题站点： . | GitHub.com #jekyll-theme repos | jamstackthemes.dev | http://jekyllthemes.org/ | https://jekyllthemes.io/ | jekyll-themes.com | . 关于主题设置的更多内容，参见Jekyll Themes。在下篇中，我将详细介绍本站采用的主题，即Chirpy主题的配置和使用。 . "
  },
  
  {
    "title": "改动说明",
    "url": "/posts/customize-my-blog/",
    "date": "2024-04-19 12:00:00 +0800",
    "categories": "Tutorial, Jekyll",
    "content": "基本信息 . | 在_config.yml中设置网页基本信息 | 在_data/authors.yml设置文章作者信息 | 在_data/contact.yml中移除Twitter(X)账号的显示 | . 自定义字体 . 博客的默认语言为英语，可以设置_config.yml中的lang变量来修改，变量取值详见ISO语言代码（如英语的lang取值为en，中文的lang取值为zh-CN）。 . 每种语言均对应一套默认字体，如英语的默认标题字体为Lato，段落字体为Source Sans Pro。字体的自定义在_sass/addon.variables.scss，参考这篇说明。 . 至于为什么会特意提到自定义字体，因为默认的中文字体实在太难看了，便改用PingFang SC作为默认字体。 . 移除标签 . 给文章打tag是我很讨厌的一项功能，标签繁复没有统一的标准，且容易和category的分类功能重复，有悖于我简洁的设计理念。况且咱又不是短视频网站，也不必打那么多tag引流路人。奈何很多blog模版都喜欢用archives/categories/tags三件套，只好自己动手丰衣足食，亲自删代码了。 . | 在_layout/post.html中移除文章末尾的标签信息 | 在_includes/trending-tags.html中移除右侧菜单栏的热门标签项 | 在_includes/search-loader.html中移除搜索结果的标签 | . 搜索优化 . 参考： https://github.com/christian-fei/Simple-Jekyll-Search https://github.com/wzpan/hexo-generator-search . 版权声明 . 虽然原作者贴心地在网站脚注和文章中声明了CC 4.0协议，但过多强调版权未免显得太严肃了，于是便简化了版权相关的声明。 . | 在_includes/footer.html中简化了网站版权的脚注 | 在_layout/post.html中移除了文章结尾的版权声明 | . 当然，作者的著作权还是要保留的，不要想着搞大新闻。 . 结语 . 我好想做嘉然小姐的狗啊。 可是嘉然小姐说她喜欢的是猫，我哭了。 我知道既不是狗也不是猫的我为什么要哭的。因为我其实是一只老鼠。 我从没奢望嘉然小姐能喜欢自己。我明白的，所有人都喜欢理解余裕上手天才打钱的萌萌的狗狗或者猫猫，没有人会喜欢阴湿带病的老鼠。 但我还是问了嘉然小姐:“我能不能做你的狗？” 我知道我是注定做不了狗的。但如果她喜欢狗，我就可以一直在身边看着她了，哪怕她怀里抱着的永远都是狗。 可是她说喜欢的是猫。 她现在还在看着我，还在逗我开心，是因为猫还没有出现，只有我这老鼠每天蹑手蹑脚地从洞里爬出来，远远地和她对视。 等她喜欢的猫来了的时候，我就该重新滚回我的洞了吧。 但我还是好喜欢她，她能在我还在她身边的时候多看我几眼吗？ 嘉然小姐说接下来的每个圣诞夜都要和大家一起过[注 2]。我不知道大家指哪些人。好希望这个集合能够对我做一次胞吞。 . 猫猫还在害怕嘉然小姐。 我会去把她爱的猫猫引来的。 我知道稍有不慎，我就会葬身猫口。 那时候嘉然小姐大概会把我的身体好好地装起来扔到门外吧。 那我就成了一包鼠条，嘻嘻[注 3]。 我希望她能把我扔得近一点，因为我还是好喜欢她。会一直喜欢下去的。 . 我的灵魂透过窗户向里面看去，挂着的铃铛在轻轻鸣响，嘉然小姐慵懒地靠在沙发上，表演得非常温顺的橘猫坐在她的肩膀。壁炉的火光照在她的脸庞，我冻僵的心脏在风里微微发烫。 . "
  }
  
]

